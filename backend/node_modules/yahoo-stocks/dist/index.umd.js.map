{"version":3,"file":"index.umd.js","sources":["../index.js"],"sourcesContent":["const https = require('https');\n\nconst RANGES = ['1h', '1d', '5d', '1mo', '1y', 'max'];\n\nconst get = url =>\n    new Promise((resolve, reject) => {\n        const req = https.get(url, res => {\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.on('end', () => {\n                resolve(data);\n            });\n        });\n        req.on('error', e => {\n            reject(e);\n        });\n    });\n\nconst getJson = url =>\n    new Promise((resolve, reject) => {\n        get(url)\n            .then(resp => JSON.parse(resp))\n            .then(resolve)\n            .catch(reject);\n    });\n\nconst lookup = symbol =>\n    new Promise((resolve, reject) => {\n        Promise.all([\n            getJson(\n                `https://autoc.finance.yahoo.com/autoc?query=${symbol}&region=1&lang=en`\n            ),\n            getJson(\n                `https://query1.finance.yahoo.com/v10/finance/quoteSummary/${symbol}?&modules=summaryProfile,financialData`\n            ),\n        ])\n            .then(responses => {\n                if (!responses[0].ResultSet.Result.length) {\n                    reject(true);\n                    return;\n                }\n                const financialData =\n                    responses[1].quoteSummary.result[0].financialData;\n                resolve({\n                    symbol,\n                    name: responses[0].ResultSet.Result[0].name,\n                    exchange: responses[0].ResultSet.Result[0].exchDisp,\n                    currentPrice: financialData.currentPrice.raw,\n                    highPrice: financialData.targetHighPrice.raw,\n                    lowPrice: financialData.targetLowPrice.raw,\n                    meanPrice: financialData.targetMeanPrice.raw,\n                    medianPrice: financialData.targetMedianPrice.raw,\n                });\n            })\n            .catch(reject);\n    });\n\nconst history = (symbol, args) =>\n    new Promise((resolve, reject) => {\n        let options = {\n            range: '1wk',\n            interval: '1d',\n            ...args,\n        };\n\n        getJson(\n            `https://query2.finance.yahoo.com/v7/finance/chart/${symbol}?range=${\n                options.range\n            }&interval=${\n                options.interval\n            }&indicators=quote&includeTimestamps=true&includePrePost=true&events=div%7Csplit%7Cearn`\n        )\n            .then(response => {\n                const quote = response.chart.result[0].indicators.quote[0];\n                const meta = response.chart.result[0].meta;\n                const h = response.chart.result[0].timestamp.map(\n                    (time, idx) => {\n                        return {\n                            time,\n                            close: quote.close[idx],\n                            open: quote.open[idx],\n                            high: quote.high[idx],\n                            low: quote.low[idx],\n                            volume: quote.volume[idx],\n                        };\n                    }\n                );\n                resolve({\n                    previousClose: meta.chartPreviousClose,\n                    records: h,\n                });\n            })\n            .catch(reject);\n    });\n\nmodule.exports = {\n    lookup,\n    history,\n};\n"],"names":["const","https","require","getJson","url","Promise","resolve","reject","get","res","let","data","on","d","e","then","resp","JSON","parse","catch","module","exports","symbol","all","responses","ResultSet","Result","length","financialData","quoteSummary","result","name","exchange","exchDisp","currentPrice","raw","highPrice","targetHighPrice","lowPrice","targetLowPrice","meanPrice","targetMeanPrice","medianPrice","targetMedianPrice","args","options","Object","range","interval","response","quote","chart","indicators","meta","h","timestamp","map","time","idx","close","open","high","low","volume","previousClose","chartPreviousClose","records"],"mappings":"0IAAAA,IAAMC,EAAQC,QAAQ,SAoBhBC,WAAUC,UACZ,IAAIC,iBAASC,EAASC,aAjBdH,UACR,IAAIC,iBAASC,EAASC,GACNN,EAAMO,IAAIJ,WAAKK,GACvBC,IAAIC,EAAO,GACXF,EAAIG,GAAG,gBAAQC,GACXF,GAAQE,IAEZJ,EAAIG,GAAG,iBACHN,EAAQK,OAGZC,GAAG,iBAASE,GACZP,EAAOO,QAMXN,CAAIJ,GACCW,cAAKC,UAAQC,KAAKC,MAAMF,KACxBD,KAAKT,GACLa,MAAMZ,MAwEnBa,OAAOC,yBArEQC,UACX,IAAIjB,iBAASC,EAASC,GAClBF,QAAQkB,KACJpB,iDACmDmB,uBAEnDnB,+DACiEmB,8CAGhEP,cAAKS,GACF,GAAKA,EAAU,GAAGC,UAAUC,OAAOC,OAAnC,CAIA3B,IAAM4B,EACFJ,EAAU,GAAGK,aAAaC,OAAO,GAAGF,cACxCtB,UACIgB,EACAS,KAAMP,EAAU,GAAGC,UAAUC,OAAO,GAAGK,KACvCC,SAAUR,EAAU,GAAGC,UAAUC,OAAO,GAAGO,SAC3CC,aAAcN,EAAcM,aAAaC,IACzCC,UAAWR,EAAcS,gBAAgBF,IACzCG,SAAUV,EAAcW,eAAeJ,IACvCK,UAAWZ,EAAca,gBAAgBN,IACzCO,YAAad,EAAce,kBAAkBR,WAb7C5B,GAAO,KAgBdY,MAAMZ,uBAGFe,EAAQsB,UACrB,IAAIvC,iBAASC,EAASC,GAClBG,IAAImC,EAAUC,kBACVC,MAAO,MACPC,SAAU,MACVJ,GAGJzC,uDACyDmB,YACjDuB,qBAEAA,qGAGH9B,cAAKkC,GACFjD,IAAMkD,EAAQD,EAASE,MAAMrB,OAAO,GAAGsB,WAAWF,MAAM,GAClDG,EAAOJ,EAASE,MAAMrB,OAAO,GAAGuB,KAChCC,EAAIL,EAASE,MAAMrB,OAAO,GAAGyB,UAAUC,aACxCC,EAAMC,eAECD,EACAE,MAAOT,EAAMS,MAAMD,GACnBE,KAAMV,EAAMU,KAAKF,GACjBG,KAAMX,EAAMW,KAAKH,GACjBI,IAAKZ,EAAMY,IAAIJ,GACfK,OAAQb,EAAMa,OAAOL,MAIjCpD,GACI0D,cAAeX,EAAKY,mBACpBC,QAASZ,MAGhBnC,MAAMZ"}