/// <reference types="node" />
import { TickData } from '../interface';
interface PublisherEvents {
    /**
     * Called when WS is ready
     */
    onReady: () => Promise<any>;
    onData: (data: TickData) => Promise<any>;
    error: (error: Error) => Promise<any>;
}
/**
 * @Websocket
 * Stream real-time trades for US stocks, forex and crypto.
 * @see https://finnhub.io/docs/api#websocket-price
 */
export declare class FinnhubWS {
    private static _instance;
    private socket;
    private symbols;
    static get Instance(): FinnhubWS;
    events: PublisherEvents;
    /**
     * @template
     * when/on
     */
    when(event: keyof PublisherEvents, func: (data?: any) => Promise<any>): void;
    private constructor();
    /**
     * config
     */
    config(): void | NodeJS.Timeout;
    /**
     * init
     */
    private init;
    /**
     * Add symbol
     * @param symbol: string
     * @returns boolean
     */
    addSymbol(symbol: string): boolean;
    /**
     * Removes symbol from subscription list
     * @param symbol
     */
    removeSymbol(symbol: String): Boolean;
}
export default FinnhubWS;
