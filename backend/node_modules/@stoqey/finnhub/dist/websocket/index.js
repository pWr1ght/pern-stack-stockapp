"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ws_1 = __importDefault(require("ws"));
var checkIfMarketIsOpen_1 = require("../utils/checkIfMarketIsOpen");
var log_1 = require("../utils/log");
var config_1 = require("../config");
var text_utils_1 = __importDefault(require("../utils/text.utils"));
/**
 * @Websocket
 * Stream real-time trades for US stocks, forex and crypto.
 * @see https://finnhub.io/docs/api#websocket-price
 */
var FinnhubWS = /** @class */ (function () {
    function FinnhubWS() {
        this.socket = null;
        this.symbols = [];
        this.events = {};
        this.config();
    }
    Object.defineProperty(FinnhubWS, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template
     * when/on
     */
    FinnhubWS.prototype.when = function (event, func) {
        this.events[event] = func;
    };
    /**
     * config
     */
    FinnhubWS.prototype.config = function () {
        var self = this;
        if (config_1.TZ_ON) {
            if (checkIfMarketIsOpen_1.checkIfMarketIsOpen()) {
                return self.init();
            }
            else {
                console.log('Market is closed cannot subscribe to market data');
                // infinity loop
                return setTimeout(function () {
                    console.log('FinnhubIO.config heartbeat');
                    self.config();
                }, 5000);
            }
        }
        self.init();
    };
    /**
     * init
     */
    FinnhubWS.prototype.init = function () {
        var self = this;
        // Emulate for test
        // if (process.env.NODE_ENV === 'test') {
        //     setTimeout(async () => {
        //         // Emit ready
        //         const onReady = self.events["onReady"];
        //         if (onReady) {
        //             await onReady();
        //         }
        //     }, 3000);
        //     return;
        // }
        console.log('FinnhubIO.init startup', (config_1.FINNHUB_KEY || '').slice(0, 5));
        this.socket = new ws_1.default("wss://ws.finnhub.io?token=" + config_1.FINNHUB_KEY);
        this.socket.on('open', function open() {
            var onReady = self.events["onReady"];
            if (onReady) {
                onReady();
            }
        });
        this.socket.on('error', function (error) {
            console.log('on error connecting socket', error);
            var onError = self.events["error"];
            if (onError) {
                onError(error);
            }
            setTimeout(function () { return self.config(); }, 2000);
            return;
        });
        this.socket.on('message', function (data) {
            return __awaiter(this, void 0, void 0, function () {
                var parsedData, priceItem, symbol, dataToSend, topicSymbol, onData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            parsedData = text_utils_1.default(data);
                            if (!parsedData)
                                return [2 /*return*/];
                            if (!(parsedData && parsedData.data && parsedData.data[0])) return [3 /*break*/, 2];
                            priceItem = parsedData.data[0];
                            symbol = priceItem.s;
                            dataToSend = {
                                price: priceItem.p,
                                date: new Date(priceItem.t),
                                symbol: priceItem.s,
                                volume: +priceItem.v
                            };
                            topicSymbol = symbol;
                            log_1.log(topicSymbol, dataToSend.price);
                            onData = self.events["onData"];
                            if (!onData) return [3 /*break*/, 2];
                            return [4 /*yield*/, onData(dataToSend)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        });
    };
    /**
     * Add symbol
     * @param symbol: string
     * @returns boolean
     */
    FinnhubWS.prototype.addSymbol = function (symbol) {
        console.log('addSymbol', symbol);
        var onData = this.events["onData"];
        // If test
        if (symbol === "TEST") {
            setTimeout(function () {
                if (onData) {
                    var dataToSend = {
                        price: 1000,
                        date: new Date(),
                        symbol: "STQ",
                        volume: 0
                    };
                    onData(dataToSend);
                }
            }, 2000);
            return true;
        }
        if (!this.socket) {
            return false;
        }
        try {
            var isExist = this.symbols.find(function (x) { return x === symbol; });
            if (isExist) {
                return false;
            }
            // Add symbol
            // Request market data for this symbol
            this.symbols.push(symbol);
            this.socket.send(JSON.stringify({ 'type': 'subscribe', symbol: symbol }));
            console.log('Added symbol', symbol);
            return true;
        }
        catch (error) {
            console.log('AddSybols ', error);
            return false;
        }
    };
    /**
     * Removes symbol from subscription list
     * @param symbol
     */
    FinnhubWS.prototype.removeSymbol = function (symbol) {
        try {
            var isExist = this.symbols.findIndex(function (x) { return x === symbol; });
            if (isExist) {
                // Remove symbol
                // Request unsubscribe market data for this symbol
                this.symbols = this.symbols.filter(function (item) { return item !== symbol; });
                this.socket.send(JSON.stringify({ 'type': 'unsubscribe', symbol: symbol }));
                return true;
            }
            return false;
        }
        catch (error) {
            console.log('Error removing symbol', error);
            return false;
        }
    };
    return FinnhubWS;
}());
exports.FinnhubWS = FinnhubWS;
exports.default = FinnhubWS;
//# sourceMappingURL=index.js.map