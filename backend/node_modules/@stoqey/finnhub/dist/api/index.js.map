{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/api/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA6C;AAE7C,+BAAqC;AAErC,IAAM,KAAK,GAAG,UAAC,GAAW,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;AAE/C;;;;;;;GAOG;AACH;IAMI,oBAAY,KAAa;QACrB,IAAI,CAAC,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC;YACpB,OAAO,EAAE,2BAA2B;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACU,+BAAU,GAAvB,UAAwB,MAAc,EAAE,KAAW,EAAE,GAAS,EAAE,UAAsB;;;;;;wBAE5E,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACnB,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;wBAC1B,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;wBAG9B,MAAM,GAAG;4BACX,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;4BACb,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;4BACjB,MAAM,QAAA;4BACN,KAAK,OAAA;4BACL,UAAU,YAAA;yBACb,CAAC;wBAEF,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;4BAC1B,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,EAAE,IAAI,MAAA,EAAE,EAAE,IAAA,EAAE,CAAC,CAAA;4BAClD,sBAAO,EAAE,EAAC;yBACb;;;;wBAKmB,qBAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE;gCAC/C,MAAM,EAAE,KAAK;gCACb,MAAM,QAAA;6BACT,CAAC,EAAA;;wBAHI,OAAO,GAAG,SAGd;wBAEI,SAAgB,OAAO,CAAC,IAAI,CAAC;wBAE7B,UAAU,GAAG,CAAC,CAAC,MAAI,IAAI,MAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,KAAK;4BAC1E,IAAM,KAAK,GAAG,EAAE,CAAC,CAAC,OAAO;4BACzB,IAAM,IAAI,GAAG,MAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC3B,IAAM,IAAI,GAAG,MAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC3B,IAAM,MAAM,GAAG,MAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC7B,IAAM,IAAI,GAAG,MAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC3B,IAAM,GAAG,GAAG,MAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC1B,OAAO;gCACH,KAAK,OAAA;gCACL,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;gCAC5B,MAAM,QAAA;gCACN,IAAI,MAAA;gCACJ,IAAI,MAAA;gCACJ,GAAG,KAAA;6BACN,CAAA;wBACL,CAAC,CAAC,CAAC;wBAEH,sBAAO,UAAU,EAAC;;;wBAGlB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,OAAK,IAAI,OAAK,CAAC,OAAO,CAAC,CAAC;wBAC7D,sBAAO,EAAE,EAAC;;;;;KAEjB;IAGD;;;;;OAKG;IACI,4BAAO,GAAd,UAAe,MAAc,EAAE,IAAU;QACrC,OAAO,kBAAW,CAAC,EAAE,MAAM,QAAA,EAAE,IAAI,MAAA,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;IACL,iBAAC;AAAD,CAAC,AAtFD,IAsFC;AAtFY,gCAAU;AAwFvB,kBAAe,UAAU,CAAC","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { MarketDataItem, Candles, Resolution, TickData } from '../interface';\nimport { getTickData } from './tick';\n\nconst round = (num: number) => Math.round(num);\n\n/**\n * FinnhubAPI\n * @StockCandles Get candlestick data for stocks.\n * https://finnhub.io/docs/api#stock-candles\n * \n * @TickData Get historical tick data for US stocks from all 13 exchanges\n * https://finnhub.io/docs/api#stock-tick\n */\nexport class FinnhubAPI {\n\n    public token: string;\n\n    public api: AxiosInstance;\n\n    constructor(token: string) {\n        this.api = axios.create({\n            baseURL: 'https://finnhub.io/api/v1'\n        });\n        this.token = token;\n    }\n\n    /**\n     * Get candlestick data for stocks.\n     * @param symbol \n     * @param start \n     * @param end \n     * @param resolution  \n     * https://finnhub.io/docs/api#stock-candles\n     */\n    public async getCandles(symbol: string, start: Date, end: Date, resolution: Resolution): Promise<MarketDataItem[]> {\n\n        const token = this.token;\n        const to = end.getTime() / 1000;\n        const from = start.getTime() / 1000;\n\n        //  const url = `https://finnhub.io/api/v1/stock/candle?symbol=${symbol}&resolution=${range}&from=${from}&to=${to}&token=${FINNHUB_KEY}`\n        const params = {\n            to: round(to),\n            from: round(from),\n            symbol,\n            token,\n            resolution\n        };\n\n        if (isNaN(from) || isNaN(to)) {\n            console.log('error with parameters', { from, to })\n            return [];\n        }\n\n        try {\n\n            // TODO check lastime we pulled this symbol, else fetch it's data again\n            const candles = await this.api.get(`stock/candle`, {\n                method: 'GET',\n                params\n            });\n\n            const data: Candles = candles.data;\n\n            const marketData = !(data && data.c || []).length ? [] : data.c.map((cc, index) => {\n                const close = cc; // a.k.\n                const open = data.o[index];\n                const time = data.t[index];\n                const volume = data.v[index];\n                const high = data.h[index];\n                const low = data.l[index];\n                return {\n                    close,\n                    date: new Date(+time * 1000),\n                    volume,\n                    open,\n                    high,\n                    low\n                }\n            });\n\n            return marketData;\n        }\n        catch (error) {\n            console.log('error getting candles', error && error.message);\n            return [];\n        }\n    }\n\n\n    /**\n     * TickData Get historical tick data for US stocks from all 13 exchanges\n     * https://finnhub.io/docs/api#stock-tick\n     * @param symbol \n     * @param date \n     */\n    public getTick(symbol: string, date: Date): Promise<TickData[]> {\n        return getTickData({ symbol, date, context: this });\n    }\n}\n\nexport default FinnhubAPI;"]}