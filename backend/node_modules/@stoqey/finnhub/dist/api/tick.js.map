{"version":3,"file":"tick.js","sourceRoot":"","sources":["../../src/api/tick.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAA4B;AAC5B,kDAA4B;AAQ3B,CAAC;AAEW,QAAA,WAAW,GAAG,UAAO,IAAiB;;;;;gBACvC,KAAqD,IAAI,KAAnC,EAAhB,GAAG,mBAAG,IAAI,IAAI,EAAE,KAAA,EAAE,KAA6B,IAAI,OAAlB,EAAf,MAAM,mBAAG,MAAM,KAAA,EAAE,OAAO,GAAK,IAAI,QAAT,CAAU;gBAE5D,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,IAAI,GAAG,gBAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBAGxC,MAAM,GAAG;oBACX,MAAM,QAAA;oBACN,KAAK,OAAA;oBACL,IAAI,MAAA;iBACP,CAAC;;;;gBAIgB,qBAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE;wBAC9C,MAAM,EAAE,KAAK;wBACb,MAAM,QAAA;qBACT,CAAC,EAAA;;gBAHI,KAAK,GAAG,SAGZ;gBAEI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC;gBAEf,qBAAM,mBAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAA;;gBAAvC,QAAQ,GAAG,SAA4B;gBAEvC,YAAY,GAAe,QAAQ,CAAC,GAAG,CAAC,UAAA,GAAG;oBAC7C,OAAO;wBACH,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;wBAC9B,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;wBAC1B,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;qBAC/B,CAAA;gBACL,CAAC,CAAC,CAAC;gBAEH,sBAAO,YAAY,EAAC;;;gBAIpB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,OAAK,IAAI,OAAK,CAAC,OAAO,CAAC,CAAC;gBAC7D,sBAAO,EAAE,EAAC;;;;KAGjB,CAAA","sourcesContent":["import csv from 'csvtojson';\nimport moment from 'moment';\nimport { TickData } from '../interface';\nimport FinnhubAPI from '.';\n\ninterface GetTickData {\n    date: Date;\n    symbol: string;\n    context: FinnhubAPI;\n};\n\nexport const getTickData = async (args: GetTickData): Promise<TickData[]> => {\n    const { date: day = new Date(), symbol = \"AAPL\", context } = args;\n\n    const token = context.token;\n    const date = moment(day).format('YYYY-MM-DD');\n\n    // https://finnhub.io/api/v1/stock/tick?symbol=AAPL&date=2020-03-25&token=\n    const params = {\n        symbol,\n        token,\n        date,\n    };\n\n    try {\n\n        const ticks = await context.api.get(`stock/tick`, {\n            method: 'GET',\n            params\n        });\n\n        const data: string = ticks.data;\n\n        const jsonData = await csv().fromString(data);\n\n        const formatedData: TickData[] = jsonData.map(jsD => {\n            return {\n                date: new Date(+jsD.timestamp),\n                price: Math.abs(jsD.price),\n                volume: Math.abs(jsD.volume),\n            }\n        });\n\n        return formatedData;\n\n    }\n    catch (error) {\n        console.log('error getting candles', error && error.message);\n        return [];\n    }\n\n}"]}