"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var tick_1 = require("./tick");
var round = function (num) { return Math.round(num); };
/**
 * FinnhubAPI
 * @StockCandles Get candlestick data for stocks.
 * https://finnhub.io/docs/api#stock-candles
 *
 * @TickData Get historical tick data for US stocks from all 13 exchanges
 * https://finnhub.io/docs/api#stock-tick
 */
var FinnhubAPI = /** @class */ (function () {
    function FinnhubAPI(token) {
        this.api = axios_1.default.create({
            baseURL: 'https://finnhub.io/api/v1'
        });
        this.token = token;
    }
    /**
     * Get candlestick data for stocks.
     * @param symbol
     * @param start
     * @param end
     * @param resolution
     * https://finnhub.io/docs/api#stock-candles
     */
    FinnhubAPI.prototype.getCandles = function (symbol, start, end, resolution) {
        return __awaiter(this, void 0, void 0, function () {
            var token, to, from, params, candles, data_1, marketData, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.token;
                        to = end.getTime() / 1000;
                        from = start.getTime() / 1000;
                        params = {
                            to: round(to),
                            from: round(from),
                            symbol: symbol,
                            token: token,
                            resolution: resolution
                        };
                        if (isNaN(from) || isNaN(to)) {
                            console.log('error with parameters', { from: from, to: to });
                            return [2 /*return*/, []];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.api.get("stock/candle", {
                                method: 'GET',
                                params: params
                            })];
                    case 2:
                        candles = _a.sent();
                        data_1 = candles.data;
                        marketData = !(data_1 && data_1.c || []).length ? [] : data_1.c.map(function (cc, index) {
                            var close = cc; // a.k.
                            var open = data_1.o[index];
                            var time = data_1.t[index];
                            var volume = data_1.v[index];
                            var high = data_1.h[index];
                            var low = data_1.l[index];
                            return {
                                close: close,
                                date: new Date(+time * 1000),
                                volume: volume,
                                open: open,
                                high: high,
                                low: low
                            };
                        });
                        return [2 /*return*/, marketData];
                    case 3:
                        error_1 = _a.sent();
                        console.log('error getting candles', error_1 && error_1.message);
                        return [2 /*return*/, []];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * TickData Get historical tick data for US stocks from all 13 exchanges
     * https://finnhub.io/docs/api#stock-tick
     * @param symbol
     * @param date
     */
    FinnhubAPI.prototype.getTick = function (symbol, date) {
        return tick_1.getTickData({ symbol: symbol, date: date, context: this });
    };
    return FinnhubAPI;
}());
exports.FinnhubAPI = FinnhubAPI;
exports.default = FinnhubAPI;
//# sourceMappingURL=index.js.map